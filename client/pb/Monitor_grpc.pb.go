// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: protos/Monitor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonitorClient is the client API for Monitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorClient interface {
	GetCpu(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Cpu, error)
	GetMem(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Mem, error)
	GetNets(ctx context.Context, in *Request, opts ...grpc.CallOption) (Monitor_GetNetsClient, error)
	GetProcs(ctx context.Context, in *Request, opts ...grpc.CallOption) (Monitor_GetProcsClient, error)
}

type monitorClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorClient(cc grpc.ClientConnInterface) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) GetCpu(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Cpu, error) {
	out := new(Cpu)
	err := c.cc.Invoke(ctx, "/pb.Monitor/GetCpu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) GetMem(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Mem, error) {
	out := new(Mem)
	err := c.cc.Invoke(ctx, "/pb.Monitor/GetMem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorClient) GetNets(ctx context.Context, in *Request, opts ...grpc.CallOption) (Monitor_GetNetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Monitor_ServiceDesc.Streams[0], "/pb.Monitor/GetNets", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorGetNetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Monitor_GetNetsClient interface {
	Recv() (*Net, error)
	grpc.ClientStream
}

type monitorGetNetsClient struct {
	grpc.ClientStream
}

func (x *monitorGetNetsClient) Recv() (*Net, error) {
	m := new(Net)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monitorClient) GetProcs(ctx context.Context, in *Request, opts ...grpc.CallOption) (Monitor_GetProcsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Monitor_ServiceDesc.Streams[1], "/pb.Monitor/GetProcs", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorGetProcsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Monitor_GetProcsClient interface {
	Recv() (*Proc, error)
	grpc.ClientStream
}

type monitorGetProcsClient struct {
	grpc.ClientStream
}

func (x *monitorGetProcsClient) Recv() (*Proc, error) {
	m := new(Proc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorServer is the server API for Monitor service.
// All implementations must embed UnimplementedMonitorServer
// for forward compatibility
type MonitorServer interface {
	GetCpu(context.Context, *Request) (*Cpu, error)
	GetMem(context.Context, *Request) (*Mem, error)
	GetNets(*Request, Monitor_GetNetsServer) error
	GetProcs(*Request, Monitor_GetProcsServer) error
	mustEmbedUnimplementedMonitorServer()
}

// UnimplementedMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedMonitorServer struct {
}

func (UnimplementedMonitorServer) GetCpu(context.Context, *Request) (*Cpu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCpu not implemented")
}
func (UnimplementedMonitorServer) GetMem(context.Context, *Request) (*Mem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMem not implemented")
}
func (UnimplementedMonitorServer) GetNets(*Request, Monitor_GetNetsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNets not implemented")
}
func (UnimplementedMonitorServer) GetProcs(*Request, Monitor_GetProcsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProcs not implemented")
}
func (UnimplementedMonitorServer) mustEmbedUnimplementedMonitorServer() {}

// UnsafeMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorServer will
// result in compilation errors.
type UnsafeMonitorServer interface {
	mustEmbedUnimplementedMonitorServer()
}

func RegisterMonitorServer(s grpc.ServiceRegistrar, srv MonitorServer) {
	s.RegisterService(&Monitor_ServiceDesc, srv)
}

func _Monitor_GetCpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetCpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Monitor/GetCpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetCpu(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_GetMem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetMem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Monitor/GetMem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetMem(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitor_GetNets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitorServer).GetNets(m, &monitorGetNetsServer{stream})
}

type Monitor_GetNetsServer interface {
	Send(*Net) error
	grpc.ServerStream
}

type monitorGetNetsServer struct {
	grpc.ServerStream
}

func (x *monitorGetNetsServer) Send(m *Net) error {
	return x.ServerStream.SendMsg(m)
}

func _Monitor_GetProcs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitorServer).GetProcs(m, &monitorGetProcsServer{stream})
}

type Monitor_GetProcsServer interface {
	Send(*Proc) error
	grpc.ServerStream
}

type monitorGetProcsServer struct {
	grpc.ServerStream
}

func (x *monitorGetProcsServer) Send(m *Proc) error {
	return x.ServerStream.SendMsg(m)
}

// Monitor_ServiceDesc is the grpc.ServiceDesc for Monitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCpu",
			Handler:    _Monitor_GetCpu_Handler,
		},
		{
			MethodName: "GetMem",
			Handler:    _Monitor_GetMem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNets",
			Handler:       _Monitor_GetNets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProcs",
			Handler:       _Monitor_GetProcs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/Monitor.proto",
}
