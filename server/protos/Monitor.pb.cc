// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#include "Monitor.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace pb {
template <typename>
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized) {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Cpu::Cpu(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cpu_s_)*/ {}

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.core_num_)*/ ::int64_t{0}

  , /*decltype(_impl_.cpu_hz_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CpuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CpuDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CpuDefaultTypeInternal() {}
  union {
    Cpu _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CpuDefaultTypeInternal _Cpu_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Mem::Mem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_)*/ ::int64_t{0}

  , /*decltype(_impl_.free_)*/ ::int64_t{0}

  , /*decltype(_impl_.available_)*/ ::int64_t{0}

  , /*decltype(_impl_.cached_)*/ ::int64_t{0}

  , /*decltype(_impl_.swap_total_)*/ ::int64_t{0}

  , /*decltype(_impl_.swap_free_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemDefaultTypeInternal() {}
  union {
    Mem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemDefaultTypeInternal _Mem_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Net::Net(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.upload_)*/ ::int64_t{0}

  , /*decltype(_impl_.upload_s_)*/ ::int64_t{0}

  , /*decltype(_impl_.download_)*/ ::int64_t{0}

  , /*decltype(_impl_.download_s_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetDefaultTypeInternal() {}
  union {
    Net _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetDefaultTypeInternal _Net_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Proc::Proc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.usr_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pid_)*/ ::int64_t{0}

  , /*decltype(_impl_.mem_)*/ ::int64_t{0}

  , /*decltype(_impl_.thread_num_)*/ ::int64_t{0}

  , /*decltype(_impl_.cpu_s_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcDefaultTypeInternal() {}
  union {
    Proc _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcDefaultTypeInternal _Proc_default_instance_;
}  // namespace pb
static ::_pb::Metadata file_level_metadata_Monitor_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Monitor_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Monitor_2eproto = nullptr;
const ::uint32_t TableStruct_Monitor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::Cpu, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb::Cpu, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::pb::Cpu, _impl_.core_num_),
    PROTOBUF_FIELD_OFFSET(::pb::Cpu, _impl_.cpu_hz_),
    PROTOBUF_FIELD_OFFSET(::pb::Cpu, _impl_.cpu_s_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::Mem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb::Mem, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::pb::Mem, _impl_.free_),
    PROTOBUF_FIELD_OFFSET(::pb::Mem, _impl_.available_),
    PROTOBUF_FIELD_OFFSET(::pb::Mem, _impl_.cached_),
    PROTOBUF_FIELD_OFFSET(::pb::Mem, _impl_.swap_total_),
    PROTOBUF_FIELD_OFFSET(::pb::Mem, _impl_.swap_free_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::Net, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb::Net, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::pb::Net, _impl_.upload_),
    PROTOBUF_FIELD_OFFSET(::pb::Net, _impl_.upload_s_),
    PROTOBUF_FIELD_OFFSET(::pb::Net, _impl_.download_),
    PROTOBUF_FIELD_OFFSET(::pb::Net, _impl_.download_s_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb::Proc, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb::Proc, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::pb::Proc, _impl_.usr_),
    PROTOBUF_FIELD_OFFSET(::pb::Proc, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::pb::Proc, _impl_.pid_),
    PROTOBUF_FIELD_OFFSET(::pb::Proc, _impl_.mem_),
    PROTOBUF_FIELD_OFFSET(::pb::Proc, _impl_.thread_num_),
    PROTOBUF_FIELD_OFFSET(::pb::Proc, _impl_.cpu_s_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::pb::Request)},
        { 8, -1, -1, sizeof(::pb::Cpu)},
        { 20, -1, -1, sizeof(::pb::Mem)},
        { 34, -1, -1, sizeof(::pb::Net)},
        { 47, -1, -1, sizeof(::pb::Proc)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::pb::_Request_default_instance_._instance,
    &::pb::_Cpu_default_instance_._instance,
    &::pb::_Mem_default_instance_._instance,
    &::pb::_Net_default_instance_._instance,
    &::pb::_Proc_default_instance_._instance,
};
const char descriptor_table_protodef_Monitor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\rMonitor.proto\022\002pb\"\t\n\007Request\"D\n\003Cpu\022\014\n"
    "\004name\030\001 \001(\t\022\020\n\010core_num\030\002 \001(\003\022\016\n\006cpu_hz\030"
    "\003 \001(\002\022\r\n\005cpu_s\030\004 \003(\002\"l\n\003Mem\022\r\n\005total\030\001 \001"
    "(\003\022\014\n\004free\030\002 \001(\003\022\021\n\tavailable\030\003 \001(\003\022\016\n\006c"
    "ached\030\004 \001(\003\022\022\n\nswap_total\030\005 \001(\003\022\021\n\tswap_"
    "free\030\006 \001(\003\"[\n\003Net\022\014\n\004name\030\001 \001(\t\022\016\n\006uploa"
    "d\030\002 \001(\003\022\020\n\010upload_s\030\003 \001(\003\022\020\n\010download\030\004 "
    "\001(\003\022\022\n\ndownload_s\030\005 \001(\003\"m\n\004Proc\022\014\n\004name\030"
    "\001 \001(\t\022\013\n\003usr\030\002 \001(\t\022\r\n\005state\030\003 \001(\t\022\013\n\003pid"
    "\030\004 \001(\003\022\013\n\003mem\030\005 \001(\003\022\022\n\nthread_num\030\006 \001(\003\022"
    "\r\n\005cpu_s\030\007 \001(\0022\221\001\n\007Monitor\022\036\n\006GetCpu\022\013.p"
    "b.Request\032\007.pb.Cpu\022\036\n\006GetMem\022\013.pb.Reques"
    "t\032\007.pb.Mem\022!\n\007GetNets\022\013.pb.Request\032\007.pb."
    "Net0\001\022#\n\010GetProcs\022\013.pb.Request\032\010.pb.Proc"
    "0\001b\006proto3"
};
static ::absl::once_flag descriptor_table_Monitor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Monitor_2eproto = {
    false,
    false,
    570,
    descriptor_table_protodef_Monitor_2eproto,
    "Monitor.proto",
    &descriptor_table_Monitor_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_Monitor_2eproto::offsets,
    file_level_metadata_Monitor_2eproto,
    file_level_enum_descriptors_Monitor_2eproto,
    file_level_service_descriptors_Monitor_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Monitor_2eproto_getter() {
  return &descriptor_table_Monitor_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Monitor_2eproto(&descriptor_table_Monitor_2eproto);
namespace pb {
// ===================================================================

class Request::_Internal {
 public:
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:pb.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[0]);
}
// ===================================================================

class Cpu::_Internal {
 public:
};

Cpu::Cpu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Cpu)
}
Cpu::Cpu(const Cpu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cpu* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_s_) { from._impl_.cpu_s_ }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.core_num_) {}

    , decltype(_impl_.cpu_hz_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.core_num_, &from._impl_.core_num_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cpu_hz_) -
    reinterpret_cast<char*>(&_impl_.core_num_)) + sizeof(_impl_.cpu_hz_));
  // @@protoc_insertion_point(copy_constructor:pb.Cpu)
}

inline void Cpu::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.cpu_s_) { arena }

    , decltype(_impl_.name_) {}

    , decltype(_impl_.core_num_) { ::int64_t{0} }

    , decltype(_impl_.cpu_hz_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cpu::~Cpu() {
  // @@protoc_insertion_point(destructor:pb.Cpu)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cpu::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cpu_s_.~RepeatedField();
  _impl_.name_.Destroy();
}

void Cpu::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cpu::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Cpu)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_cpu_s()->Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.core_num_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cpu_hz_) -
      reinterpret_cast<char*>(&_impl_.core_num_)) + sizeof(_impl_.cpu_hz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cpu::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Cpu.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 core_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.core_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float cpu_hz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.cpu_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float cpu_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_cpu_s(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 37) {
          _internal_add_cpu_s(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Cpu::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Cpu)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pb.Cpu.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 core_num = 2;
  if (this->_internal_core_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_core_num(), target);
  }

  // float cpu_hz = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_hz = this->_internal_cpu_hz();
  ::uint32_t raw_cpu_hz;
  memcpy(&raw_cpu_hz, &tmp_cpu_hz, sizeof(tmp_cpu_hz));
  if (raw_cpu_hz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_cpu_hz(), target);
  }

  // repeated float cpu_s = 4;
  if (this->_internal_cpu_s_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_cpu_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Cpu)
  return target;
}

::size_t Cpu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Cpu)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float cpu_s = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_cpu_s_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int64 core_num = 2;
  if (this->_internal_core_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_core_num());
  }

  // float cpu_hz = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_hz = this->_internal_cpu_hz();
  ::uint32_t raw_cpu_hz;
  memcpy(&raw_cpu_hz, &tmp_cpu_hz, sizeof(tmp_cpu_hz));
  if (raw_cpu_hz != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cpu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cpu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cpu::GetClassData() const { return &_class_data_; }


void Cpu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cpu*>(&to_msg);
  auto& from = static_cast<const Cpu&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Cpu)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cpu_s_.MergeFrom(from._impl_.cpu_s_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_core_num() != 0) {
    _this->_internal_set_core_num(from._internal_core_num());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_hz = from._internal_cpu_hz();
  ::uint32_t raw_cpu_hz;
  memcpy(&raw_cpu_hz, &tmp_cpu_hz, sizeof(tmp_cpu_hz));
  if (raw_cpu_hz != 0) {
    _this->_internal_set_cpu_hz(from._internal_cpu_hz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cpu::CopyFrom(const Cpu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Cpu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cpu::IsInitialized() const {
  return true;
}

void Cpu::InternalSwap(Cpu* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cpu_s_.InternalSwap(&other->_impl_.cpu_s_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cpu, _impl_.cpu_hz_)
      + sizeof(Cpu::_impl_.cpu_hz_)
      - PROTOBUF_FIELD_OFFSET(Cpu, _impl_.core_num_)>(
          reinterpret_cast<char*>(&_impl_.core_num_),
          reinterpret_cast<char*>(&other->_impl_.core_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cpu::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[1]);
}
// ===================================================================

class Mem::_Internal {
 public:
};

Mem::Mem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Mem)
}
Mem::Mem(const Mem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.Mem)
}

inline void Mem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.total_) { ::int64_t{0} }

    , decltype(_impl_.free_) { ::int64_t{0} }

    , decltype(_impl_.available_) { ::int64_t{0} }

    , decltype(_impl_.cached_) { ::int64_t{0} }

    , decltype(_impl_.swap_total_) { ::int64_t{0} }

    , decltype(_impl_.swap_free_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mem::~Mem() {
  // @@protoc_insertion_point(destructor:pb.Mem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Mem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mem::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Mem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.swap_free_) -
      reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.swap_free_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 free = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 available = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 cached = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 swap_total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.swap_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 swap_free = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.swap_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Mem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Mem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total = 1;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_total(), target);
  }

  // int64 free = 2;
  if (this->_internal_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_free(), target);
  }

  // int64 available = 3;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_available(), target);
  }

  // int64 cached = 4;
  if (this->_internal_cached() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_cached(), target);
  }

  // int64 swap_total = 5;
  if (this->_internal_swap_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_swap_total(), target);
  }

  // int64 swap_free = 6;
  if (this->_internal_swap_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_swap_free(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Mem)
  return target;
}

::size_t Mem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Mem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 total = 1;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_total());
  }

  // int64 free = 2;
  if (this->_internal_free() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_free());
  }

  // int64 available = 3;
  if (this->_internal_available() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_available());
  }

  // int64 cached = 4;
  if (this->_internal_cached() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_cached());
  }

  // int64 swap_total = 5;
  if (this->_internal_swap_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_swap_total());
  }

  // int64 swap_free = 6;
  if (this->_internal_swap_free() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_swap_free());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mem::GetClassData() const { return &_class_data_; }


void Mem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mem*>(&to_msg);
  auto& from = static_cast<const Mem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Mem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_free() != 0) {
    _this->_internal_set_free(from._internal_free());
  }
  if (from._internal_available() != 0) {
    _this->_internal_set_available(from._internal_available());
  }
  if (from._internal_cached() != 0) {
    _this->_internal_set_cached(from._internal_cached());
  }
  if (from._internal_swap_total() != 0) {
    _this->_internal_set_swap_total(from._internal_swap_total());
  }
  if (from._internal_swap_free() != 0) {
    _this->_internal_set_swap_free(from._internal_swap_free());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mem::CopyFrom(const Mem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Mem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mem::IsInitialized() const {
  return true;
}

void Mem::InternalSwap(Mem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mem, _impl_.swap_free_)
      + sizeof(Mem::_impl_.swap_free_)
      - PROTOBUF_FIELD_OFFSET(Mem, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[2]);
}
// ===================================================================

class Net::_Internal {
 public:
};

Net::Net(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Net)
}
Net::Net(const Net& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Net* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.upload_) {}

    , decltype(_impl_.upload_s_) {}

    , decltype(_impl_.download_) {}

    , decltype(_impl_.download_s_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.upload_, &from._impl_.upload_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.download_s_) -
    reinterpret_cast<char*>(&_impl_.upload_)) + sizeof(_impl_.download_s_));
  // @@protoc_insertion_point(copy_constructor:pb.Net)
}

inline void Net::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.upload_) { ::int64_t{0} }

    , decltype(_impl_.upload_s_) { ::int64_t{0} }

    , decltype(_impl_.download_) { ::int64_t{0} }

    , decltype(_impl_.download_s_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Net::~Net() {
  // @@protoc_insertion_point(destructor:pb.Net)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Net::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Net::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Net::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Net)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.upload_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.download_s_) -
      reinterpret_cast<char*>(&_impl_.upload_)) + sizeof(_impl_.download_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Net::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Net.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 upload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.upload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 upload_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.upload_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 download = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.download_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 download_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.download_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Net::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Net)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pb.Net.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 upload = 2;
  if (this->_internal_upload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_upload(), target);
  }

  // int64 upload_s = 3;
  if (this->_internal_upload_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_upload_s(), target);
  }

  // int64 download = 4;
  if (this->_internal_download() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_download(), target);
  }

  // int64 download_s = 5;
  if (this->_internal_download_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_download_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Net)
  return target;
}

::size_t Net::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Net)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int64 upload = 2;
  if (this->_internal_upload() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_upload());
  }

  // int64 upload_s = 3;
  if (this->_internal_upload_s() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_upload_s());
  }

  // int64 download = 4;
  if (this->_internal_download() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_download());
  }

  // int64 download_s = 5;
  if (this->_internal_download_s() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_download_s());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Net::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Net::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Net::GetClassData() const { return &_class_data_; }


void Net::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Net*>(&to_msg);
  auto& from = static_cast<const Net&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Net)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_upload() != 0) {
    _this->_internal_set_upload(from._internal_upload());
  }
  if (from._internal_upload_s() != 0) {
    _this->_internal_set_upload_s(from._internal_upload_s());
  }
  if (from._internal_download() != 0) {
    _this->_internal_set_download(from._internal_download());
  }
  if (from._internal_download_s() != 0) {
    _this->_internal_set_download_s(from._internal_download_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Net::CopyFrom(const Net& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Net)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Net::IsInitialized() const {
  return true;
}

void Net::InternalSwap(Net* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Net, _impl_.download_s_)
      + sizeof(Net::_impl_.download_s_)
      - PROTOBUF_FIELD_OFFSET(Net, _impl_.upload_)>(
          reinterpret_cast<char*>(&_impl_.upload_),
          reinterpret_cast<char*>(&other->_impl_.upload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Net::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[3]);
}
// ===================================================================

class Proc::_Internal {
 public:
};

Proc::Proc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb.Proc)
}
Proc::Proc(const Proc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Proc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.usr_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.pid_) {}

    , decltype(_impl_.mem_) {}

    , decltype(_impl_.thread_num_) {}

    , decltype(_impl_.cpu_s_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.usr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.usr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usr().empty()) {
    _this->_impl_.usr_.Set(from._internal_usr(), _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pid_, &from._impl_.pid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cpu_s_) -
    reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.cpu_s_));
  // @@protoc_insertion_point(copy_constructor:pb.Proc)
}

inline void Proc::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.usr_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.pid_) { ::int64_t{0} }

    , decltype(_impl_.mem_) { ::int64_t{0} }

    , decltype(_impl_.thread_num_) { ::int64_t{0} }

    , decltype(_impl_.cpu_s_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.usr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.usr_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Proc::~Proc() {
  // @@protoc_insertion_point(destructor:pb.Proc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Proc::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.usr_.Destroy();
  _impl_.state_.Destroy();
}

void Proc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Proc::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.Proc)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.usr_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  ::memset(&_impl_.pid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cpu_s_) -
      reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.cpu_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Proc.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string usr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_usr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Proc.usr"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "pb.Proc.state"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 mem = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.mem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 thread_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.thread_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float cpu_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _impl_.cpu_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Proc::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Proc)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pb.Proc.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string usr = 2;
  if (!this->_internal_usr().empty()) {
    const std::string& _s = this->_internal_usr();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pb.Proc.usr");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    const std::string& _s = this->_internal_state();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "pb.Proc.state");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int64 pid = 4;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_pid(), target);
  }

  // int64 mem = 5;
  if (this->_internal_mem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_mem(), target);
  }

  // int64 thread_num = 6;
  if (this->_internal_thread_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_thread_num(), target);
  }

  // float cpu_s = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_s = this->_internal_cpu_s();
  ::uint32_t raw_cpu_s;
  memcpy(&raw_cpu_s, &tmp_cpu_s, sizeof(tmp_cpu_s));
  if (raw_cpu_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_cpu_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Proc)
  return target;
}

::size_t Proc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.Proc)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string usr = 2;
  if (!this->_internal_usr().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_usr());
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_state());
  }

  // int64 pid = 4;
  if (this->_internal_pid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_pid());
  }

  // int64 mem = 5;
  if (this->_internal_mem() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_mem());
  }

  // int64 thread_num = 6;
  if (this->_internal_thread_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_thread_num());
  }

  // float cpu_s = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_s = this->_internal_cpu_s();
  ::uint32_t raw_cpu_s;
  memcpy(&raw_cpu_s, &tmp_cpu_s, sizeof(tmp_cpu_s));
  if (raw_cpu_s != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Proc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Proc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Proc::GetClassData() const { return &_class_data_; }


void Proc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Proc*>(&to_msg);
  auto& from = static_cast<const Proc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb.Proc)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_usr().empty()) {
    _this->_internal_set_usr(from._internal_usr());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_pid() != 0) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_mem() != 0) {
    _this->_internal_set_mem(from._internal_mem());
  }
  if (from._internal_thread_num() != 0) {
    _this->_internal_set_thread_num(from._internal_thread_num());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_cpu_s = from._internal_cpu_s();
  ::uint32_t raw_cpu_s;
  memcpy(&raw_cpu_s, &tmp_cpu_s, sizeof(tmp_cpu_s));
  if (raw_cpu_s != 0) {
    _this->_internal_set_cpu_s(from._internal_cpu_s());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Proc::CopyFrom(const Proc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.Proc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proc::IsInitialized() const {
  return true;
}

void Proc::InternalSwap(Proc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.usr_, lhs_arena,
                                       &other->_impl_.usr_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, lhs_arena,
                                       &other->_impl_.state_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proc, _impl_.cpu_s_)
      + sizeof(Proc::_impl_.cpu_s_)
      - PROTOBUF_FIELD_OFFSET(Proc, _impl_.pid_)>(
          reinterpret_cast<char*>(&_impl_.pid_),
          reinterpret_cast<char*>(&other->_impl_.pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Monitor_2eproto_getter, &descriptor_table_Monitor_2eproto_once,
      file_level_metadata_Monitor_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::Request*
Arena::CreateMaybeMessage< ::pb::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Cpu*
Arena::CreateMaybeMessage< ::pb::Cpu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Cpu >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Mem*
Arena::CreateMaybeMessage< ::pb::Mem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Mem >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Net*
Arena::CreateMaybeMessage< ::pb::Net >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Net >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::Proc*
Arena::CreateMaybeMessage< ::pb::Proc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pb::Proc >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
