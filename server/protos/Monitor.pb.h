// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monitor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Monitor_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Monitor_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Monitor_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Monitor_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_Monitor_2eproto;
namespace pb {
class Cpu;
struct CpuDefaultTypeInternal;
extern CpuDefaultTypeInternal _Cpu_default_instance_;
class Mem;
struct MemDefaultTypeInternal;
extern MemDefaultTypeInternal _Mem_default_instance_;
class Net;
struct NetDefaultTypeInternal;
extern NetDefaultTypeInternal _Net_default_instance_;
class Proc;
struct ProcDefaultTypeInternal;
extern ProcDefaultTypeInternal _Proc_default_instance_;
class Reponse;
struct ReponseDefaultTypeInternal;
extern ReponseDefaultTypeInternal _Reponse_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template <>
::pb::Cpu* Arena::CreateMaybeMessage<::pb::Cpu>(Arena*);
template <>
::pb::Mem* Arena::CreateMaybeMessage<::pb::Mem>(Arena*);
template <>
::pb::Net* Arena::CreateMaybeMessage<::pb::Net>(Arena*);
template <>
::pb::Proc* Arena::CreateMaybeMessage<::pb::Proc>(Arena*);
template <>
::pb::Reponse* Arena::CreateMaybeMessage<::pb::Reponse>(Arena*);
template <>
::pb::Request* Arena::CreateMaybeMessage<::pb::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace pb {

// ===================================================================


// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pb.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Monitor_2eproto;
};// -------------------------------------------------------------------

class Reponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Reponse) */ {
 public:
  inline Reponse() : Reponse(nullptr) {}
  ~Reponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Reponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reponse(const Reponse& from);
  Reponse(Reponse&& from) noexcept
    : Reponse() {
    *this = ::std::move(from);
  }

  inline Reponse& operator=(const Reponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reponse& operator=(Reponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reponse* internal_default_instance() {
    return reinterpret_cast<const Reponse*>(
               &_Reponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Reponse& a, Reponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Reponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Reponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Reponse& from) {
    Reponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.Reponse";
  }
  protected:
  explicit Reponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetFieldNumber = 3,
    kProcFieldNumber = 4,
    kCpuFieldNumber = 1,
    kMemFieldNumber = 2,
  };
  // repeated .pb.Net net = 3;
  int net_size() const;
  private:
  int _internal_net_size() const;

  public:
  void clear_net() ;
  ::pb::Net* mutable_net(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Net >*
      mutable_net();
  private:
  const ::pb::Net& _internal_net(int index) const;
  ::pb::Net* _internal_add_net();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pb::Net>& _internal_net() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pb::Net>* _internal_mutable_net();
  public:
  const ::pb::Net& net(int index) const;
  ::pb::Net* add_net();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Net >&
      net() const;
  // repeated .pb.Proc proc = 4;
  int proc_size() const;
  private:
  int _internal_proc_size() const;

  public:
  void clear_proc() ;
  ::pb::Proc* mutable_proc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Proc >*
      mutable_proc();
  private:
  const ::pb::Proc& _internal_proc(int index) const;
  ::pb::Proc* _internal_add_proc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pb::Proc>& _internal_proc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pb::Proc>* _internal_mutable_proc();
  public:
  const ::pb::Proc& proc(int index) const;
  ::pb::Proc* add_proc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Proc >&
      proc() const;
  // .pb.Cpu cpu = 1;
  bool has_cpu() const;
  void clear_cpu() ;
  const ::pb::Cpu& cpu() const;
  PROTOBUF_NODISCARD ::pb::Cpu* release_cpu();
  ::pb::Cpu* mutable_cpu();
  void set_allocated_cpu(::pb::Cpu* cpu);
  private:
  const ::pb::Cpu& _internal_cpu() const;
  ::pb::Cpu* _internal_mutable_cpu();
  public:
  void unsafe_arena_set_allocated_cpu(
      ::pb::Cpu* cpu);
  ::pb::Cpu* unsafe_arena_release_cpu();
  // .pb.Mem mem = 2;
  bool has_mem() const;
  void clear_mem() ;
  const ::pb::Mem& mem() const;
  PROTOBUF_NODISCARD ::pb::Mem* release_mem();
  ::pb::Mem* mutable_mem();
  void set_allocated_mem(::pb::Mem* mem);
  private:
  const ::pb::Mem& _internal_mem() const;
  ::pb::Mem* _internal_mutable_mem();
  public:
  void unsafe_arena_set_allocated_mem(
      ::pb::Mem* mem);
  ::pb::Mem* unsafe_arena_release_mem();
  // @@protoc_insertion_point(class_scope:pb.Reponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Net > net_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Proc > proc_;
    ::pb::Cpu* cpu_;
    ::pb::Mem* mem_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Monitor_2eproto;
};// -------------------------------------------------------------------

class Cpu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Cpu) */ {
 public:
  inline Cpu() : Cpu(nullptr) {}
  ~Cpu() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Cpu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cpu(const Cpu& from);
  Cpu(Cpu&& from) noexcept
    : Cpu() {
    *this = ::std::move(from);
  }

  inline Cpu& operator=(const Cpu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cpu& operator=(Cpu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cpu& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cpu* internal_default_instance() {
    return reinterpret_cast<const Cpu*>(
               &_Cpu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Cpu& a, Cpu& b) {
    a.Swap(&b);
  }
  inline void Swap(Cpu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cpu* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cpu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cpu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cpu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Cpu& from) {
    Cpu::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cpu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.Cpu";
  }
  protected:
  explicit Cpu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuSFieldNumber = 4,
    kNameFieldNumber = 1,
    kCoreNumFieldNumber = 2,
    kCpuHzFieldNumber = 3,
  };
  // repeated float cpu_s = 4;
  int cpu_s_size() const;
  private:
  int _internal_cpu_s_size() const;

  public:
  void clear_cpu_s() ;
  float cpu_s(int index) const;
  void set_cpu_s(int index, float value);
  void add_cpu_s(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& cpu_s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_cpu_s();

  private:
  float _internal_cpu_s(int index) const;
  void _internal_add_cpu_s(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_cpu_s() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_cpu_s();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 core_num = 2;
  void clear_core_num() ;
  ::int64_t core_num() const;
  void set_core_num(::int64_t value);

  private:
  ::int64_t _internal_core_num() const;
  void _internal_set_core_num(::int64_t value);

  public:
  // float cpu_hz = 3;
  void clear_cpu_hz() ;
  float cpu_hz() const;
  void set_cpu_hz(float value);

  private:
  float _internal_cpu_hz() const;
  void _internal_set_cpu_hz(float value);

  public:
  // @@protoc_insertion_point(class_scope:pb.Cpu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> cpu_s_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int64_t core_num_;
    float cpu_hz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Monitor_2eproto;
};// -------------------------------------------------------------------

class Mem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Mem) */ {
 public:
  inline Mem() : Mem(nullptr) {}
  ~Mem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Mem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mem(const Mem& from);
  Mem(Mem&& from) noexcept
    : Mem() {
    *this = ::std::move(from);
  }

  inline Mem& operator=(const Mem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mem& operator=(Mem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mem& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mem* internal_default_instance() {
    return reinterpret_cast<const Mem*>(
               &_Mem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Mem& a, Mem& b) {
    a.Swap(&b);
  }
  inline void Swap(Mem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Mem& from) {
    Mem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.Mem";
  }
  protected:
  explicit Mem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kFreeFieldNumber = 2,
    kAvailableFieldNumber = 3,
    kCachedFieldNumber = 4,
    kSwapTotalFieldNumber = 5,
    kSwapFreeFieldNumber = 6,
  };
  // int64 total = 1;
  void clear_total() ;
  ::int64_t total() const;
  void set_total(::int64_t value);

  private:
  ::int64_t _internal_total() const;
  void _internal_set_total(::int64_t value);

  public:
  // int64 free = 2;
  void clear_free() ;
  ::int64_t free() const;
  void set_free(::int64_t value);

  private:
  ::int64_t _internal_free() const;
  void _internal_set_free(::int64_t value);

  public:
  // int64 available = 3;
  void clear_available() ;
  ::int64_t available() const;
  void set_available(::int64_t value);

  private:
  ::int64_t _internal_available() const;
  void _internal_set_available(::int64_t value);

  public:
  // int64 cached = 4;
  void clear_cached() ;
  ::int64_t cached() const;
  void set_cached(::int64_t value);

  private:
  ::int64_t _internal_cached() const;
  void _internal_set_cached(::int64_t value);

  public:
  // int64 swap_total = 5;
  void clear_swap_total() ;
  ::int64_t swap_total() const;
  void set_swap_total(::int64_t value);

  private:
  ::int64_t _internal_swap_total() const;
  void _internal_set_swap_total(::int64_t value);

  public:
  // int64 swap_free = 6;
  void clear_swap_free() ;
  ::int64_t swap_free() const;
  void set_swap_free(::int64_t value);

  private:
  ::int64_t _internal_swap_free() const;
  void _internal_set_swap_free(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:pb.Mem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t total_;
    ::int64_t free_;
    ::int64_t available_;
    ::int64_t cached_;
    ::int64_t swap_total_;
    ::int64_t swap_free_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Monitor_2eproto;
};// -------------------------------------------------------------------

class Net final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Net) */ {
 public:
  inline Net() : Net(nullptr) {}
  ~Net() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Net(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Net(const Net& from);
  Net(Net&& from) noexcept
    : Net() {
    *this = ::std::move(from);
  }

  inline Net& operator=(const Net& from) {
    CopyFrom(from);
    return *this;
  }
  inline Net& operator=(Net&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Net& default_instance() {
    return *internal_default_instance();
  }
  static inline const Net* internal_default_instance() {
    return reinterpret_cast<const Net*>(
               &_Net_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Net& a, Net& b) {
    a.Swap(&b);
  }
  inline void Swap(Net* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Net* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Net* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Net>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Net& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Net& from) {
    Net::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Net* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.Net";
  }
  protected:
  explicit Net(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUploadFieldNumber = 2,
    kUploadSFieldNumber = 3,
    kDownloadFieldNumber = 4,
    kDownloadSFieldNumber = 5,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 upload = 2;
  void clear_upload() ;
  ::int64_t upload() const;
  void set_upload(::int64_t value);

  private:
  ::int64_t _internal_upload() const;
  void _internal_set_upload(::int64_t value);

  public:
  // int64 upload_s = 3;
  void clear_upload_s() ;
  ::int64_t upload_s() const;
  void set_upload_s(::int64_t value);

  private:
  ::int64_t _internal_upload_s() const;
  void _internal_set_upload_s(::int64_t value);

  public:
  // int64 download = 4;
  void clear_download() ;
  ::int64_t download() const;
  void set_download(::int64_t value);

  private:
  ::int64_t _internal_download() const;
  void _internal_set_download(::int64_t value);

  public:
  // int64 download_s = 5;
  void clear_download_s() ;
  ::int64_t download_s() const;
  void set_download_s(::int64_t value);

  private:
  ::int64_t _internal_download_s() const;
  void _internal_set_download_s(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:pb.Net)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::int64_t upload_;
    ::int64_t upload_s_;
    ::int64_t download_;
    ::int64_t download_s_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Monitor_2eproto;
};// -------------------------------------------------------------------

class Proc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Proc) */ {
 public:
  inline Proc() : Proc(nullptr) {}
  ~Proc() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Proc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proc(const Proc& from);
  Proc(Proc&& from) noexcept
    : Proc() {
    *this = ::std::move(from);
  }

  inline Proc& operator=(const Proc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proc& operator=(Proc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proc& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proc* internal_default_instance() {
    return reinterpret_cast<const Proc*>(
               &_Proc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Proc& a, Proc& b) {
    a.Swap(&b);
  }
  inline void Swap(Proc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proc* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Proc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Proc& from) {
    Proc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb.Proc";
  }
  protected:
  explicit Proc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUsrFieldNumber = 2,
    kStateFieldNumber = 3,
    kPidFieldNumber = 4,
    kMemFieldNumber = 5,
    kThreadNumFieldNumber = 6,
    kCpuSFieldNumber = 7,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string usr = 2;
  void clear_usr() ;
  const std::string& usr() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_usr(Arg_&& arg, Args_... args);
  std::string* mutable_usr();
  PROTOBUF_NODISCARD std::string* release_usr();
  void set_allocated_usr(std::string* ptr);

  private:
  const std::string& _internal_usr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usr(
      const std::string& value);
  std::string* _internal_mutable_usr();

  public:
  // string state = 3;
  void clear_state() ;
  const std::string& state() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* ptr);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // int64 pid = 4;
  void clear_pid() ;
  ::int64_t pid() const;
  void set_pid(::int64_t value);

  private:
  ::int64_t _internal_pid() const;
  void _internal_set_pid(::int64_t value);

  public:
  // int64 mem = 5;
  void clear_mem() ;
  ::int64_t mem() const;
  void set_mem(::int64_t value);

  private:
  ::int64_t _internal_mem() const;
  void _internal_set_mem(::int64_t value);

  public:
  // int64 thread_num = 6;
  void clear_thread_num() ;
  ::int64_t thread_num() const;
  void set_thread_num(::int64_t value);

  private:
  ::int64_t _internal_thread_num() const;
  void _internal_set_thread_num(::int64_t value);

  public:
  // float cpu_s = 7;
  void clear_cpu_s() ;
  float cpu_s() const;
  void set_cpu_s(float value);

  private:
  float _internal_cpu_s() const;
  void _internal_set_cpu_s(float value);

  public:
  // @@protoc_insertion_point(class_scope:pb.Proc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    ::int64_t pid_;
    ::int64_t mem_;
    ::int64_t thread_num_;
    float cpu_s_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Monitor_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Request

// -------------------------------------------------------------------

// Reponse

// .pb.Cpu cpu = 1;
inline bool Reponse::has_cpu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cpu_ != nullptr);
  return value;
}
inline void Reponse::clear_cpu() {
  if (_impl_.cpu_ != nullptr) _impl_.cpu_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::pb::Cpu& Reponse::_internal_cpu() const {
  const ::pb::Cpu* p = _impl_.cpu_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Cpu&>(
      ::pb::_Cpu_default_instance_);
}
inline const ::pb::Cpu& Reponse::cpu() const {
  // @@protoc_insertion_point(field_get:pb.Reponse.cpu)
  return _internal_cpu();
}
inline void Reponse::unsafe_arena_set_allocated_cpu(
    ::pb::Cpu* cpu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cpu_);
  }
  _impl_.cpu_ = cpu;
  if (cpu) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Reponse.cpu)
}
inline ::pb::Cpu* Reponse::release_cpu() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pb::Cpu* temp = _impl_.cpu_;
  _impl_.cpu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::Cpu* Reponse::unsafe_arena_release_cpu() {
  // @@protoc_insertion_point(field_release:pb.Reponse.cpu)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pb::Cpu* temp = _impl_.cpu_;
  _impl_.cpu_ = nullptr;
  return temp;
}
inline ::pb::Cpu* Reponse::_internal_mutable_cpu() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Cpu>(GetArenaForAllocation());
    _impl_.cpu_ = p;
  }
  return _impl_.cpu_;
}
inline ::pb::Cpu* Reponse::mutable_cpu() {
  ::pb::Cpu* _msg = _internal_mutable_cpu();
  // @@protoc_insertion_point(field_mutable:pb.Reponse.cpu)
  return _msg;
}
inline void Reponse::set_allocated_cpu(::pb::Cpu* cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cpu_;
  }
  if (cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cpu);
    if (message_arena != submessage_arena) {
      cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cpu_ = cpu;
  // @@protoc_insertion_point(field_set_allocated:pb.Reponse.cpu)
}

// .pb.Mem mem = 2;
inline bool Reponse::has_mem() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mem_ != nullptr);
  return value;
}
inline void Reponse::clear_mem() {
  if (_impl_.mem_ != nullptr) _impl_.mem_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::pb::Mem& Reponse::_internal_mem() const {
  const ::pb::Mem* p = _impl_.mem_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb::Mem&>(
      ::pb::_Mem_default_instance_);
}
inline const ::pb::Mem& Reponse::mem() const {
  // @@protoc_insertion_point(field_get:pb.Reponse.mem)
  return _internal_mem();
}
inline void Reponse::unsafe_arena_set_allocated_mem(
    ::pb::Mem* mem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mem_);
  }
  _impl_.mem_ = mem;
  if (mem) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb.Reponse.mem)
}
inline ::pb::Mem* Reponse::release_mem() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::pb::Mem* temp = _impl_.mem_;
  _impl_.mem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pb::Mem* Reponse::unsafe_arena_release_mem() {
  // @@protoc_insertion_point(field_release:pb.Reponse.mem)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::pb::Mem* temp = _impl_.mem_;
  _impl_.mem_ = nullptr;
  return temp;
}
inline ::pb::Mem* Reponse::_internal_mutable_mem() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.mem_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::Mem>(GetArenaForAllocation());
    _impl_.mem_ = p;
  }
  return _impl_.mem_;
}
inline ::pb::Mem* Reponse::mutable_mem() {
  ::pb::Mem* _msg = _internal_mutable_mem();
  // @@protoc_insertion_point(field_mutable:pb.Reponse.mem)
  return _msg;
}
inline void Reponse::set_allocated_mem(::pb::Mem* mem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mem_;
  }
  if (mem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mem);
    if (message_arena != submessage_arena) {
      mem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mem_ = mem;
  // @@protoc_insertion_point(field_set_allocated:pb.Reponse.mem)
}

// repeated .pb.Net net = 3;
inline int Reponse::_internal_net_size() const {
  return _impl_.net_.size();
}
inline int Reponse::net_size() const {
  return _internal_net_size();
}
inline void Reponse::clear_net() {
  _internal_mutable_net()->Clear();
}
inline ::pb::Net* Reponse::mutable_net(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Reponse.net)
  return _internal_mutable_net()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Net >*
Reponse::mutable_net() {
  // @@protoc_insertion_point(field_mutable_list:pb.Reponse.net)
  return _internal_mutable_net();
}
inline const ::pb::Net& Reponse::_internal_net(int index) const {
  return _internal_net().Get(index);
}
inline const ::pb::Net& Reponse::net(int index) const {
  // @@protoc_insertion_point(field_get:pb.Reponse.net)
  return _internal_net(index);
}
inline ::pb::Net* Reponse::_internal_add_net() {
  return _internal_mutable_net()->Add();
}
inline ::pb::Net* Reponse::add_net() {
  ::pb::Net* _add = _internal_add_net();
  // @@protoc_insertion_point(field_add:pb.Reponse.net)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Net >&
Reponse::net() const {
  // @@protoc_insertion_point(field_list:pb.Reponse.net)
  return _internal_net();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pb::Net>&
Reponse::_internal_net() const {
  return _impl_.net_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pb::Net>*
Reponse::_internal_mutable_net() {
  return &_impl_.net_;
}

// repeated .pb.Proc proc = 4;
inline int Reponse::_internal_proc_size() const {
  return _impl_.proc_.size();
}
inline int Reponse::proc_size() const {
  return _internal_proc_size();
}
inline void Reponse::clear_proc() {
  _internal_mutable_proc()->Clear();
}
inline ::pb::Proc* Reponse::mutable_proc(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Reponse.proc)
  return _internal_mutable_proc()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Proc >*
Reponse::mutable_proc() {
  // @@protoc_insertion_point(field_mutable_list:pb.Reponse.proc)
  return _internal_mutable_proc();
}
inline const ::pb::Proc& Reponse::_internal_proc(int index) const {
  return _internal_proc().Get(index);
}
inline const ::pb::Proc& Reponse::proc(int index) const {
  // @@protoc_insertion_point(field_get:pb.Reponse.proc)
  return _internal_proc(index);
}
inline ::pb::Proc* Reponse::_internal_add_proc() {
  return _internal_mutable_proc()->Add();
}
inline ::pb::Proc* Reponse::add_proc() {
  ::pb::Proc* _add = _internal_add_proc();
  // @@protoc_insertion_point(field_add:pb.Reponse.proc)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::Proc >&
Reponse::proc() const {
  // @@protoc_insertion_point(field_list:pb.Reponse.proc)
  return _internal_proc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pb::Proc>&
Reponse::_internal_proc() const {
  return _impl_.proc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::pb::Proc>*
Reponse::_internal_mutable_proc() {
  return &_impl_.proc_;
}

// -------------------------------------------------------------------

// Cpu

// string name = 1;
inline void Cpu::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Cpu::name() const {
  // @@protoc_insertion_point(field_get:pb.Cpu.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Cpu::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Cpu.name)
}
inline std::string* Cpu::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.Cpu.name)
  return _s;
}
inline const std::string& Cpu::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Cpu::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Cpu::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Cpu::release_name() {
  // @@protoc_insertion_point(field_release:pb.Cpu.name)
  return _impl_.name_.Release();
}
inline void Cpu::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Cpu.name)
}

// int64 core_num = 2;
inline void Cpu::clear_core_num() {
  _impl_.core_num_ = ::int64_t{0};
}
inline ::int64_t Cpu::core_num() const {
  // @@protoc_insertion_point(field_get:pb.Cpu.core_num)
  return _internal_core_num();
}
inline void Cpu::set_core_num(::int64_t value) {
  _internal_set_core_num(value);
  // @@protoc_insertion_point(field_set:pb.Cpu.core_num)
}
inline ::int64_t Cpu::_internal_core_num() const {
  return _impl_.core_num_;
}
inline void Cpu::_internal_set_core_num(::int64_t value) {
  ;
  _impl_.core_num_ = value;
}

// float cpu_hz = 3;
inline void Cpu::clear_cpu_hz() {
  _impl_.cpu_hz_ = 0;
}
inline float Cpu::cpu_hz() const {
  // @@protoc_insertion_point(field_get:pb.Cpu.cpu_hz)
  return _internal_cpu_hz();
}
inline void Cpu::set_cpu_hz(float value) {
  _internal_set_cpu_hz(value);
  // @@protoc_insertion_point(field_set:pb.Cpu.cpu_hz)
}
inline float Cpu::_internal_cpu_hz() const {
  return _impl_.cpu_hz_;
}
inline void Cpu::_internal_set_cpu_hz(float value) {
  ;
  _impl_.cpu_hz_ = value;
}

// repeated float cpu_s = 4;
inline int Cpu::_internal_cpu_s_size() const {
  return _impl_.cpu_s_.size();
}
inline int Cpu::cpu_s_size() const {
  return _internal_cpu_s_size();
}
inline void Cpu::clear_cpu_s() {
  _internal_mutable_cpu_s()->Clear();
}
inline float Cpu::cpu_s(int index) const {
  // @@protoc_insertion_point(field_get:pb.Cpu.cpu_s)
  return _internal_cpu_s(index);
}
inline void Cpu::set_cpu_s(int index, float value) {
  _internal_mutable_cpu_s()->Set(index, value);
  // @@protoc_insertion_point(field_set:pb.Cpu.cpu_s)
}
inline void Cpu::add_cpu_s(float value) {
  _internal_add_cpu_s(value);
  // @@protoc_insertion_point(field_add:pb.Cpu.cpu_s)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& Cpu::cpu_s() const {
  // @@protoc_insertion_point(field_list:pb.Cpu.cpu_s)
  return _internal_cpu_s();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* Cpu::mutable_cpu_s() {
  // @@protoc_insertion_point(field_mutable_list:pb.Cpu.cpu_s)
  return _internal_mutable_cpu_s();
}

inline float Cpu::_internal_cpu_s(int index) const {
  return _internal_cpu_s().Get(index);
}
inline void Cpu::_internal_add_cpu_s(float value) {
  _internal_mutable_cpu_s()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& Cpu::_internal_cpu_s() const {
  return _impl_.cpu_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* Cpu::_internal_mutable_cpu_s() {
  return &_impl_.cpu_s_;
}

// -------------------------------------------------------------------

// Mem

// int64 total = 1;
inline void Mem::clear_total() {
  _impl_.total_ = ::int64_t{0};
}
inline ::int64_t Mem::total() const {
  // @@protoc_insertion_point(field_get:pb.Mem.total)
  return _internal_total();
}
inline void Mem::set_total(::int64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:pb.Mem.total)
}
inline ::int64_t Mem::_internal_total() const {
  return _impl_.total_;
}
inline void Mem::_internal_set_total(::int64_t value) {
  ;
  _impl_.total_ = value;
}

// int64 free = 2;
inline void Mem::clear_free() {
  _impl_.free_ = ::int64_t{0};
}
inline ::int64_t Mem::free() const {
  // @@protoc_insertion_point(field_get:pb.Mem.free)
  return _internal_free();
}
inline void Mem::set_free(::int64_t value) {
  _internal_set_free(value);
  // @@protoc_insertion_point(field_set:pb.Mem.free)
}
inline ::int64_t Mem::_internal_free() const {
  return _impl_.free_;
}
inline void Mem::_internal_set_free(::int64_t value) {
  ;
  _impl_.free_ = value;
}

// int64 available = 3;
inline void Mem::clear_available() {
  _impl_.available_ = ::int64_t{0};
}
inline ::int64_t Mem::available() const {
  // @@protoc_insertion_point(field_get:pb.Mem.available)
  return _internal_available();
}
inline void Mem::set_available(::int64_t value) {
  _internal_set_available(value);
  // @@protoc_insertion_point(field_set:pb.Mem.available)
}
inline ::int64_t Mem::_internal_available() const {
  return _impl_.available_;
}
inline void Mem::_internal_set_available(::int64_t value) {
  ;
  _impl_.available_ = value;
}

// int64 cached = 4;
inline void Mem::clear_cached() {
  _impl_.cached_ = ::int64_t{0};
}
inline ::int64_t Mem::cached() const {
  // @@protoc_insertion_point(field_get:pb.Mem.cached)
  return _internal_cached();
}
inline void Mem::set_cached(::int64_t value) {
  _internal_set_cached(value);
  // @@protoc_insertion_point(field_set:pb.Mem.cached)
}
inline ::int64_t Mem::_internal_cached() const {
  return _impl_.cached_;
}
inline void Mem::_internal_set_cached(::int64_t value) {
  ;
  _impl_.cached_ = value;
}

// int64 swap_total = 5;
inline void Mem::clear_swap_total() {
  _impl_.swap_total_ = ::int64_t{0};
}
inline ::int64_t Mem::swap_total() const {
  // @@protoc_insertion_point(field_get:pb.Mem.swap_total)
  return _internal_swap_total();
}
inline void Mem::set_swap_total(::int64_t value) {
  _internal_set_swap_total(value);
  // @@protoc_insertion_point(field_set:pb.Mem.swap_total)
}
inline ::int64_t Mem::_internal_swap_total() const {
  return _impl_.swap_total_;
}
inline void Mem::_internal_set_swap_total(::int64_t value) {
  ;
  _impl_.swap_total_ = value;
}

// int64 swap_free = 6;
inline void Mem::clear_swap_free() {
  _impl_.swap_free_ = ::int64_t{0};
}
inline ::int64_t Mem::swap_free() const {
  // @@protoc_insertion_point(field_get:pb.Mem.swap_free)
  return _internal_swap_free();
}
inline void Mem::set_swap_free(::int64_t value) {
  _internal_set_swap_free(value);
  // @@protoc_insertion_point(field_set:pb.Mem.swap_free)
}
inline ::int64_t Mem::_internal_swap_free() const {
  return _impl_.swap_free_;
}
inline void Mem::_internal_set_swap_free(::int64_t value) {
  ;
  _impl_.swap_free_ = value;
}

// -------------------------------------------------------------------

// Net

// string name = 1;
inline void Net::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Net::name() const {
  // @@protoc_insertion_point(field_get:pb.Net.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Net::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Net.name)
}
inline std::string* Net::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.Net.name)
  return _s;
}
inline const std::string& Net::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Net::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Net::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Net::release_name() {
  // @@protoc_insertion_point(field_release:pb.Net.name)
  return _impl_.name_.Release();
}
inline void Net::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Net.name)
}

// int64 upload = 2;
inline void Net::clear_upload() {
  _impl_.upload_ = ::int64_t{0};
}
inline ::int64_t Net::upload() const {
  // @@protoc_insertion_point(field_get:pb.Net.upload)
  return _internal_upload();
}
inline void Net::set_upload(::int64_t value) {
  _internal_set_upload(value);
  // @@protoc_insertion_point(field_set:pb.Net.upload)
}
inline ::int64_t Net::_internal_upload() const {
  return _impl_.upload_;
}
inline void Net::_internal_set_upload(::int64_t value) {
  ;
  _impl_.upload_ = value;
}

// int64 upload_s = 3;
inline void Net::clear_upload_s() {
  _impl_.upload_s_ = ::int64_t{0};
}
inline ::int64_t Net::upload_s() const {
  // @@protoc_insertion_point(field_get:pb.Net.upload_s)
  return _internal_upload_s();
}
inline void Net::set_upload_s(::int64_t value) {
  _internal_set_upload_s(value);
  // @@protoc_insertion_point(field_set:pb.Net.upload_s)
}
inline ::int64_t Net::_internal_upload_s() const {
  return _impl_.upload_s_;
}
inline void Net::_internal_set_upload_s(::int64_t value) {
  ;
  _impl_.upload_s_ = value;
}

// int64 download = 4;
inline void Net::clear_download() {
  _impl_.download_ = ::int64_t{0};
}
inline ::int64_t Net::download() const {
  // @@protoc_insertion_point(field_get:pb.Net.download)
  return _internal_download();
}
inline void Net::set_download(::int64_t value) {
  _internal_set_download(value);
  // @@protoc_insertion_point(field_set:pb.Net.download)
}
inline ::int64_t Net::_internal_download() const {
  return _impl_.download_;
}
inline void Net::_internal_set_download(::int64_t value) {
  ;
  _impl_.download_ = value;
}

// int64 download_s = 5;
inline void Net::clear_download_s() {
  _impl_.download_s_ = ::int64_t{0};
}
inline ::int64_t Net::download_s() const {
  // @@protoc_insertion_point(field_get:pb.Net.download_s)
  return _internal_download_s();
}
inline void Net::set_download_s(::int64_t value) {
  _internal_set_download_s(value);
  // @@protoc_insertion_point(field_set:pb.Net.download_s)
}
inline ::int64_t Net::_internal_download_s() const {
  return _impl_.download_s_;
}
inline void Net::_internal_set_download_s(::int64_t value) {
  ;
  _impl_.download_s_ = value;
}

// -------------------------------------------------------------------

// Proc

// string name = 1;
inline void Proc::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Proc::name() const {
  // @@protoc_insertion_point(field_get:pb.Proc.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proc::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Proc.name)
}
inline std::string* Proc::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb.Proc.name)
  return _s;
}
inline const std::string& Proc::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Proc::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Proc::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Proc::release_name() {
  // @@protoc_insertion_point(field_release:pb.Proc.name)
  return _impl_.name_.Release();
}
inline void Proc::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Proc.name)
}

// string usr = 2;
inline void Proc::clear_usr() {
  _impl_.usr_.ClearToEmpty();
}
inline const std::string& Proc::usr() const {
  // @@protoc_insertion_point(field_get:pb.Proc.usr)
  return _internal_usr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proc::set_usr(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.usr_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Proc.usr)
}
inline std::string* Proc::mutable_usr() {
  std::string* _s = _internal_mutable_usr();
  // @@protoc_insertion_point(field_mutable:pb.Proc.usr)
  return _s;
}
inline const std::string& Proc::_internal_usr() const {
  return _impl_.usr_.Get();
}
inline void Proc::_internal_set_usr(const std::string& value) {
  ;


  _impl_.usr_.Set(value, GetArenaForAllocation());
}
inline std::string* Proc::_internal_mutable_usr() {
  ;
  return _impl_.usr_.Mutable( GetArenaForAllocation());
}
inline std::string* Proc::release_usr() {
  // @@protoc_insertion_point(field_release:pb.Proc.usr)
  return _impl_.usr_.Release();
}
inline void Proc::set_allocated_usr(std::string* value) {
  _impl_.usr_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.usr_.IsDefault()) {
          _impl_.usr_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Proc.usr)
}

// string state = 3;
inline void Proc::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& Proc::state() const {
  // @@protoc_insertion_point(field_get:pb.Proc.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proc::set_state(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.Proc.state)
}
inline std::string* Proc::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:pb.Proc.state)
  return _s;
}
inline const std::string& Proc::_internal_state() const {
  return _impl_.state_.Get();
}
inline void Proc::_internal_set_state(const std::string& value) {
  ;


  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* Proc::_internal_mutable_state() {
  ;
  return _impl_.state_.Mutable( GetArenaForAllocation());
}
inline std::string* Proc::release_state() {
  // @@protoc_insertion_point(field_release:pb.Proc.state)
  return _impl_.state_.Release();
}
inline void Proc::set_allocated_state(std::string* value) {
  _impl_.state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.Proc.state)
}

// int64 pid = 4;
inline void Proc::clear_pid() {
  _impl_.pid_ = ::int64_t{0};
}
inline ::int64_t Proc::pid() const {
  // @@protoc_insertion_point(field_get:pb.Proc.pid)
  return _internal_pid();
}
inline void Proc::set_pid(::int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:pb.Proc.pid)
}
inline ::int64_t Proc::_internal_pid() const {
  return _impl_.pid_;
}
inline void Proc::_internal_set_pid(::int64_t value) {
  ;
  _impl_.pid_ = value;
}

// int64 mem = 5;
inline void Proc::clear_mem() {
  _impl_.mem_ = ::int64_t{0};
}
inline ::int64_t Proc::mem() const {
  // @@protoc_insertion_point(field_get:pb.Proc.mem)
  return _internal_mem();
}
inline void Proc::set_mem(::int64_t value) {
  _internal_set_mem(value);
  // @@protoc_insertion_point(field_set:pb.Proc.mem)
}
inline ::int64_t Proc::_internal_mem() const {
  return _impl_.mem_;
}
inline void Proc::_internal_set_mem(::int64_t value) {
  ;
  _impl_.mem_ = value;
}

// int64 thread_num = 6;
inline void Proc::clear_thread_num() {
  _impl_.thread_num_ = ::int64_t{0};
}
inline ::int64_t Proc::thread_num() const {
  // @@protoc_insertion_point(field_get:pb.Proc.thread_num)
  return _internal_thread_num();
}
inline void Proc::set_thread_num(::int64_t value) {
  _internal_set_thread_num(value);
  // @@protoc_insertion_point(field_set:pb.Proc.thread_num)
}
inline ::int64_t Proc::_internal_thread_num() const {
  return _impl_.thread_num_;
}
inline void Proc::_internal_set_thread_num(::int64_t value) {
  ;
  _impl_.thread_num_ = value;
}

// float cpu_s = 7;
inline void Proc::clear_cpu_s() {
  _impl_.cpu_s_ = 0;
}
inline float Proc::cpu_s() const {
  // @@protoc_insertion_point(field_get:pb.Proc.cpu_s)
  return _internal_cpu_s();
}
inline void Proc::set_cpu_s(float value) {
  _internal_set_cpu_s(value);
  // @@protoc_insertion_point(field_set:pb.Proc.cpu_s)
}
inline float Proc::_internal_cpu_s() const {
  return _impl_.cpu_s_;
}
inline void Proc::_internal_set_cpu_s(float value) {
  ;
  _impl_.cpu_s_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Monitor_2eproto_2epb_2eh
