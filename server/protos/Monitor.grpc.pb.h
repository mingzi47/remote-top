// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Monitor.proto
#ifndef GRPC_Monitor_2eproto__INCLUDED
#define GRPC_Monitor_2eproto__INCLUDED

#include "Monitor.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace pb {

class Monitor final {
 public:
  static constexpr char const* service_full_name() {
    return "pb.Monitor";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetCpu(::grpc::ClientContext* context, const ::pb::Request& request, ::pb::Cpu* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Cpu>> AsyncGetCpu(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Cpu>>(AsyncGetCpuRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Cpu>> PrepareAsyncGetCpu(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Cpu>>(PrepareAsyncGetCpuRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMem(::grpc::ClientContext* context, const ::pb::Request& request, ::pb::Mem* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Mem>> AsyncGetMem(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Mem>>(AsyncGetMemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Mem>> PrepareAsyncGetMem(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pb::Mem>>(PrepareAsyncGetMemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::Net>> GetNets(::grpc::ClientContext* context, const ::pb::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::Net>>(GetNetsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::Net>> AsyncGetNets(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::Net>>(AsyncGetNetsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::Net>> PrepareAsyncGetNets(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::Net>>(PrepareAsyncGetNetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::Proc>> GetProcs(::grpc::ClientContext* context, const ::pb::Request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pb::Proc>>(GetProcsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::Proc>> AsyncGetProcs(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::Proc>>(AsyncGetProcsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::Proc>> PrepareAsyncGetProcs(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pb::Proc>>(PrepareAsyncGetProcsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetCpu(::grpc::ClientContext* context, const ::pb::Request* request, ::pb::Cpu* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCpu(::grpc::ClientContext* context, const ::pb::Request* request, ::pb::Cpu* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMem(::grpc::ClientContext* context, const ::pb::Request* request, ::pb::Mem* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMem(::grpc::ClientContext* context, const ::pb::Request* request, ::pb::Mem* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNets(::grpc::ClientContext* context, const ::pb::Request* request, ::grpc::ClientReadReactor< ::pb::Net>* reactor) = 0;
      virtual void GetProcs(::grpc::ClientContext* context, const ::pb::Request* request, ::grpc::ClientReadReactor< ::pb::Proc>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::Cpu>* AsyncGetCpuRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::Cpu>* PrepareAsyncGetCpuRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::Mem>* AsyncGetMemRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pb::Mem>* PrepareAsyncGetMemRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pb::Net>* GetNetsRaw(::grpc::ClientContext* context, const ::pb::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::Net>* AsyncGetNetsRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::Net>* PrepareAsyncGetNetsRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pb::Proc>* GetProcsRaw(::grpc::ClientContext* context, const ::pb::Request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::Proc>* AsyncGetProcsRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pb::Proc>* PrepareAsyncGetProcsRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetCpu(::grpc::ClientContext* context, const ::pb::Request& request, ::pb::Cpu* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Cpu>> AsyncGetCpu(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Cpu>>(AsyncGetCpuRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Cpu>> PrepareAsyncGetCpu(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Cpu>>(PrepareAsyncGetCpuRaw(context, request, cq));
    }
    ::grpc::Status GetMem(::grpc::ClientContext* context, const ::pb::Request& request, ::pb::Mem* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Mem>> AsyncGetMem(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Mem>>(AsyncGetMemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Mem>> PrepareAsyncGetMem(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pb::Mem>>(PrepareAsyncGetMemRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pb::Net>> GetNets(::grpc::ClientContext* context, const ::pb::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::Net>>(GetNetsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::Net>> AsyncGetNets(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::Net>>(AsyncGetNetsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::Net>> PrepareAsyncGetNets(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::Net>>(PrepareAsyncGetNetsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pb::Proc>> GetProcs(::grpc::ClientContext* context, const ::pb::Request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pb::Proc>>(GetProcsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::Proc>> AsyncGetProcs(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::Proc>>(AsyncGetProcsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::Proc>> PrepareAsyncGetProcs(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pb::Proc>>(PrepareAsyncGetProcsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetCpu(::grpc::ClientContext* context, const ::pb::Request* request, ::pb::Cpu* response, std::function<void(::grpc::Status)>) override;
      void GetCpu(::grpc::ClientContext* context, const ::pb::Request* request, ::pb::Cpu* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMem(::grpc::ClientContext* context, const ::pb::Request* request, ::pb::Mem* response, std::function<void(::grpc::Status)>) override;
      void GetMem(::grpc::ClientContext* context, const ::pb::Request* request, ::pb::Mem* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNets(::grpc::ClientContext* context, const ::pb::Request* request, ::grpc::ClientReadReactor< ::pb::Net>* reactor) override;
      void GetProcs(::grpc::ClientContext* context, const ::pb::Request* request, ::grpc::ClientReadReactor< ::pb::Proc>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pb::Cpu>* AsyncGetCpuRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::Cpu>* PrepareAsyncGetCpuRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::Mem>* AsyncGetMemRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pb::Mem>* PrepareAsyncGetMemRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pb::Net>* GetNetsRaw(::grpc::ClientContext* context, const ::pb::Request& request) override;
    ::grpc::ClientAsyncReader< ::pb::Net>* AsyncGetNetsRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::Net>* PrepareAsyncGetNetsRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pb::Proc>* GetProcsRaw(::grpc::ClientContext* context, const ::pb::Request& request) override;
    ::grpc::ClientAsyncReader< ::pb::Proc>* AsyncGetProcsRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pb::Proc>* PrepareAsyncGetProcsRaw(::grpc::ClientContext* context, const ::pb::Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCpu_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMem_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNets_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProcs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetCpu(::grpc::ServerContext* context, const ::pb::Request* request, ::pb::Cpu* response);
    virtual ::grpc::Status GetMem(::grpc::ServerContext* context, const ::pb::Request* request, ::pb::Mem* response);
    virtual ::grpc::Status GetNets(::grpc::ServerContext* context, const ::pb::Request* request, ::grpc::ServerWriter< ::pb::Net>* writer);
    virtual ::grpc::Status GetProcs(::grpc::ServerContext* context, const ::pb::Request* request, ::grpc::ServerWriter< ::pb::Proc>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCpu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCpu() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCpu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCpu(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Cpu* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCpu(::grpc::ServerContext* context, ::pb::Request* request, ::grpc::ServerAsyncResponseWriter< ::pb::Cpu>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMem() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMem(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Mem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMem(::grpc::ServerContext* context, ::pb::Request* request, ::grpc::ServerAsyncResponseWriter< ::pb::Mem>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNets() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetNets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNets(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Net>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNets(::grpc::ServerContext* context, ::pb::Request* request, ::grpc::ServerAsyncWriter< ::pb::Net>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProcs() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcs(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Proc>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProcs(::grpc::ServerContext* context, ::pb::Request* request, ::grpc::ServerAsyncWriter< ::pb::Proc>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCpu<WithAsyncMethod_GetMem<WithAsyncMethod_GetNets<WithAsyncMethod_GetProcs<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetCpu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCpu() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::pb::Request, ::pb::Cpu>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pb::Request* request, ::pb::Cpu* response) { return this->GetCpu(context, request, response); }));}
    void SetMessageAllocatorFor_GetCpu(
        ::grpc::MessageAllocator< ::pb::Request, ::pb::Cpu>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pb::Request, ::pb::Cpu>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCpu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCpu(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Cpu* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCpu(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Cpu* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMem() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::pb::Request, ::pb::Mem>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pb::Request* request, ::pb::Mem* response) { return this->GetMem(context, request, response); }));}
    void SetMessageAllocatorFor_GetMem(
        ::grpc::MessageAllocator< ::pb::Request, ::pb::Mem>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pb::Request, ::pb::Mem>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMem(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Mem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMem(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Mem* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNets() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::pb::Request, ::pb::Net>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pb::Request* request) { return this->GetNets(context, request); }));
    }
    ~WithCallbackMethod_GetNets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNets(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Net>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::pb::Net>* GetNets(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::Request* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProcs() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::pb::Request, ::pb::Proc>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pb::Request* request) { return this->GetProcs(context, request); }));
    }
    ~WithCallbackMethod_GetProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcs(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Proc>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::pb::Proc>* GetProcs(
      ::grpc::CallbackServerContext* /*context*/, const ::pb::Request* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetCpu<WithCallbackMethod_GetMem<WithCallbackMethod_GetNets<WithCallbackMethod_GetProcs<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCpu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCpu() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCpu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCpu(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Cpu* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMem() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMem(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Mem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNets() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetNets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNets(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Net>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProcs() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcs(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Proc>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCpu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCpu() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCpu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCpu(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Cpu* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCpu(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMem() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMem(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Mem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMem(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNets() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetNets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNets(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Net>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProcs() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcs(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Proc>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProcs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCpu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCpu() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCpu(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCpu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCpu(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Cpu* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCpu(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMem() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMem(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMem(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Mem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMem(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNets() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetNets(context, request); }));
    }
    ~WithRawCallbackMethod_GetNets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNets(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Net>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetNets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProcs() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetProcs(context, request); }));
    }
    ~WithRawCallbackMethod_GetProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProcs(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Proc>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetProcs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCpu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCpu() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb::Request, ::pb::Cpu>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pb::Request, ::pb::Cpu>* streamer) {
                       return this->StreamedGetCpu(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCpu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCpu(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Cpu* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCpu(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::Request,::pb::Cpu>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMem() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pb::Request, ::pb::Mem>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pb::Request, ::pb::Mem>* streamer) {
                       return this->StreamedGetMem(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMem(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::pb::Mem* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pb::Request,::pb::Mem>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCpu<WithStreamedUnaryMethod_GetMem<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetNets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetNets() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::pb::Request, ::pb::Net>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::pb::Request, ::pb::Net>* streamer) {
                       return this->StreamedGetNets(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetNets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNets(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Net>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetNets(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::Request,::pb::Net>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetProcs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetProcs() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::pb::Request, ::pb::Proc>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::pb::Request, ::pb::Proc>* streamer) {
                       return this->StreamedGetProcs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetProcs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProcs(::grpc::ServerContext* /*context*/, const ::pb::Request* /*request*/, ::grpc::ServerWriter< ::pb::Proc>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetProcs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pb::Request,::pb::Proc>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetNets<WithSplitStreamingMethod_GetProcs<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCpu<WithStreamedUnaryMethod_GetMem<WithSplitStreamingMethod_GetNets<WithSplitStreamingMethod_GetProcs<Service > > > > StreamedService;
};

}  // namespace pb


#endif  // GRPC_Monitor_2eproto__INCLUDED
